// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Models.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var kind: Request.Kind = .memoryQuery

  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Kind: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case memoryQuery // = 0
    case memoryBatchQuery // = 1
    case functionQuery // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .memoryQuery
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .memoryQuery
      case 1: self = .memoryBatchQuery
      case 3: self = .functionQuery
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .memoryQuery: return 0
      case .memoryBatchQuery: return 1
      case .functionQuery: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

struct Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var kind: Response.Kind = .error

  var data: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Kind: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case error // = 0
    case memoryQuery // = 1
    case memoryBatchQuery // = 2
    case functionQuery // = 3
    case UNRECOGNIZED(Int)

    init() {
      self = .error
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .error
      case 1: self = .memoryQuery
      case 2: self = .memoryBatchQuery
      case 3: self = .functionQuery
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .error: return 0
      case .memoryQuery: return 1
      case .memoryBatchQuery: return 2
      case .functionQuery: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Error {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var message: String = String()

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct MemoryQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var kind: MemoryQuery.Kind = .read

  var address: UInt32 = 0

  var data: Data = SwiftProtobuf.Internal.emptyData

  var size: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Kind: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case read // = 0
    case write // = 1
    case UNRECOGNIZED(Int)

    init() {
      self = .read
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .read
      case 1: self = .write
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .read: return 0
      case .write: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Result {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var data: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct MemoryBatchQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var queries: [MemoryQuery] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Result {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var results: [MemoryQuery.Result] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct FunctionQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var args: [Data] = []

  var kind: FunctionQuery.Kind = .dev

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Kind: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case dev // = 0
    case enumVisibleObjects // = 1
    case objectPointer // = 3
    case activePlayerPointer // = 4
    case activePlayerGuid // = 5
    case mapID // = 6
    case clickToMove // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .dev
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .dev
      case 1: self = .enumVisibleObjects
      case 3: self = .objectPointer
      case 4: self = .activePlayerPointer
      case 5: self = .activePlayerGuid
      case 6: self = .mapID
      case 7: self = .clickToMove
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .dev: return 0
      case .enumVisibleObjects: return 1
      case .objectPointer: return 3
      case .activePlayerPointer: return 4
      case .activePlayerGuid: return 5
      case .mapID: return 6
      case .clickToMove: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  struct Result {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var data: Data = SwiftProtobuf.Internal.emptyData

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  init() {}
}

struct WoWObjectsResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pointers: [UInt32] = []

  var guids: [UInt64] = []

  var types: [WoWObjectsResult.TypeEnum] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum TypeEnum: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case none // = 0
    case item // = 1
    case container // = 2
    case unit // = 3
    case player // = 4
    case gameObject // = 5
    case dynamicObject // = 6
    case corpse // = 7
    case UNRECOGNIZED(Int)

    init() {
      self = .none
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .item
      case 2: self = .container
      case 3: self = .unit
      case 4: self = .player
      case 5: self = .gameObject
      case 6: self = .dynamicObject
      case 7: self = .corpse
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .none: return 0
      case .item: return 1
      case .container: return 2
      case .unit: return 3
      case .player: return 4
      case .gameObject: return 5
      case .dynamicObject: return 6
      case .corpse: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.kind)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kind != .memoryQuery {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Request) -> Bool {
    if self.kind != other.kind {return false}
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Request.Kind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MEMORY_QUERY"),
    1: .same(proto: "MEMORY_BATCH_QUERY"),
    3: .same(proto: "FUNCTION_QUERY"),
  ]
}

extension Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.kind)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kind != .error {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Response) -> Bool {
    if self.kind != other.kind {return false}
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Response.Kind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ERROR"),
    1: .same(proto: "MEMORY_QUERY"),
    2: .same(proto: "MEMORY_BATCH_QUERY"),
    3: .same(proto: "FUNCTION_QUERY"),
  ]
}

extension Response.Error: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Response.protoMessageName + ".Error"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Response.Error) -> Bool {
    if self.message != other.message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MemoryQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MemoryQuery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
    2: .same(proto: "address"),
    3: .same(proto: "data"),
    4: .same(proto: "size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.kind)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.address)
      case 3: try decoder.decodeSingularBytesField(value: &self.data)
      case 4: try decoder.decodeSingularInt32Field(value: &self.size)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kind != .read {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 1)
    }
    if self.address != 0 {
      try visitor.visitSingularUInt32Field(value: self.address, fieldNumber: 2)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 3)
    }
    if self.size != 0 {
      try visitor.visitSingularInt32Field(value: self.size, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: MemoryQuery) -> Bool {
    if self.kind != other.kind {return false}
    if self.address != other.address {return false}
    if self.data != other.data {return false}
    if self.size != other.size {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MemoryQuery.Kind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "READ"),
    1: .same(proto: "WRITE"),
  ]
}

extension MemoryQuery.Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = MemoryQuery.protoMessageName + ".Result"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: MemoryQuery.Result) -> Bool {
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MemoryBatchQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MemoryBatchQuery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "queries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.queries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.queries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.queries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: MemoryBatchQuery) -> Bool {
    if self.queries != other.queries {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension MemoryBatchQuery.Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = MemoryBatchQuery.protoMessageName + ".Result"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "results"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.results)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: MemoryBatchQuery.Result) -> Bool {
    if self.results != other.results {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension FunctionQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FunctionQuery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "args"),
    2: .same(proto: "kind"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedBytesField(value: &self.args)
      case 2: try decoder.decodeSingularEnumField(value: &self.kind)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.args.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.args, fieldNumber: 1)
    }
    if self.kind != .dev {
      try visitor.visitSingularEnumField(value: self.kind, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: FunctionQuery) -> Bool {
    if self.args != other.args {return false}
    if self.kind != other.kind {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension FunctionQuery.Kind: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEV"),
    1: .same(proto: "ENUM_VISIBLE_OBJECTS"),
    3: .same(proto: "OBJECT_POINTER"),
    4: .same(proto: "ACTIVE_PLAYER_POINTER"),
    5: .same(proto: "ACTIVE_PLAYER_GUID"),
    6: .same(proto: "MAP_ID"),
    7: .same(proto: "CLICK_TO_MOVE"),
  ]
}

extension FunctionQuery.Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = FunctionQuery.protoMessageName + ".Result"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: FunctionQuery.Result) -> Bool {
    if self.data != other.data {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension WoWObjectsResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "WoWObjectsResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pointers"),
    2: .same(proto: "guids"),
    3: .same(proto: "types"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt32Field(value: &self.pointers)
      case 2: try decoder.decodeRepeatedUInt64Field(value: &self.guids)
      case 3: try decoder.decodeRepeatedEnumField(value: &self.types)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pointers.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.pointers, fieldNumber: 1)
    }
    if !self.guids.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.guids, fieldNumber: 2)
    }
    if !self.types.isEmpty {
      try visitor.visitPackedEnumField(value: self.types, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: WoWObjectsResult) -> Bool {
    if self.pointers != other.pointers {return false}
    if self.guids != other.guids {return false}
    if self.types != other.types {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension WoWObjectsResult.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "ITEM"),
    2: .same(proto: "CONTAINER"),
    3: .same(proto: "UNIT"),
    4: .same(proto: "PLAYER"),
    5: .same(proto: "GAME_OBJECT"),
    6: .same(proto: "DYNAMIC_OBJECT"),
    7: .same(proto: "CORPSE"),
  ]
}
